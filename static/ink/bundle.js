f = format;
Pi = 3.14159265;
Tau = (2 * Pi);
abs = x => {return __ink_match((x < 0), [[() => true, () => __ink_negate(x)], [() => false, () => x]])};
sign = x => {return __ink_match((x < 0), [[() => true, () => __ink_negate(1)], [() => false, () => 1]])};
jslog = x => {return (() => {return (() => {let __ink_acc_trgt = __as_ink_string(console); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})()})()(x)};
Canvas = (() => {return bind(document, __Ink_String(`getElementById`))})()(__Ink_String(`game-canvas`));
Ctx = (() => {return bind(Canvas, __Ink_String(`getContext`))})()(__Ink_String(`2d`));
on = (el, name, fn) => {return (() => {return bind(el, __Ink_String(`addEventListener`))})()(name, fn)};
sqrt = x => {return pow(x, 0.50000000)};
distanceSq = (a, b) => {return __as_ink_string(pow(((() => {let __ink_acc_trgt = __as_ink_string(a); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})() - (() => {let __ink_acc_trgt = __as_ink_string(b); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()), 2) + pow(((() => {let __ink_acc_trgt = __as_ink_string(a); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[1] || null : (__ink_acc_trgt[1] !== undefined ? __ink_acc_trgt[1] : null)})() - (() => {let __ink_acc_trgt = __as_ink_string(b); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[1] || null : (__ink_acc_trgt[1] !== undefined ? __ink_acc_trgt[1] : null)})()), 2))};
distance = (a, b) => {return sqrt(distanceSq(a, b))};
rgb = (r, g, b) => {return f(__Ink_String(`rgb({{0}}, {{1}}, {{2}})`), [(r * 255.99000000), (g * 255.99000000), (b * 255.99000000)])};
rgba = (r, g, b, a) => {return f(__Ink_String(`rgb({{0}}, {{1}}, {{2}}, {{3}})`), [(r * 255.99000000), (g * 255.99000000), (b * 255.99000000), a])};
Black = rgb(0, 0, 0);
White = rgb(0.99000000, 0.99000000, 0.99000000);
coinflip = () => {return (rand() > 0.50000000)};
randRange = (min, max) => {return __as_ink_string(min + (rand() * (() => {return (max - min)})()))};
randInt = (min, max) => {return floor(randRange(min, max))};
randColor = () => {return rgb(rand(), rand(), rand())};
randColorAlpha = () => {return rgba(rand(), rand(), rand(), rand())};
randColorGreyscale = () => (() => {let r = rand(); return rgb(r, r, r)})();
randColorGreyscaleAlpha = () => (() => {let r = rand(); return rgba(r, r, r, rand())})();
setFill = color => {return (() => {let __ink_assgn_trgt = __as_ink_string(Ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(fillStyle, color) : (__ink_assgn_trgt.fillStyle) = color; return __ink_assgn_trgt})()};
setLineWidth = width => {return (() => {let __ink_assgn_trgt = __as_ink_string(Ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(lineWidth, width) : (__ink_assgn_trgt.lineWidth) = width; return __ink_assgn_trgt})()};
setStroke = color => {return (() => {let __ink_assgn_trgt = __as_ink_string(Ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strokeStyle, color) : (__ink_assgn_trgt.strokeStyle) = color; return __ink_assgn_trgt})()};
fillRect = bind(Ctx, __Ink_String(`fillRect`));
strokeRect = bind(Ctx, __Ink_String(`strokeRect`));
clearRect = bind(Ctx, __Ink_String(`clearRect`));
beginPath = bind(Ctx, __Ink_String(`beginPath`));
moveTo = bind(Ctx, __Ink_String(`moveTo`));
lineTo = bind(Ctx, __Ink_String(`lineTo`));
arc = bind(Ctx, __Ink_String(`arc`));
stroke = bind(Ctx, __Ink_String(`stroke`));
fill = bind(Ctx, __Ink_String(`fill`));
drawLine = (start, end) => (() => {beginPath(); moveTo((() => {let __ink_acc_trgt = __as_ink_string(start); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(start); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[1] || null : (__ink_acc_trgt[1] !== undefined ? __ink_acc_trgt[1] : null)})()); lineTo((() => {let __ink_acc_trgt = __as_ink_string(end); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(end); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[1] || null : (__ink_acc_trgt[1] !== undefined ? __ink_acc_trgt[1] : null)})()); return stroke()})();
drawSinglePath = points => (() => {beginPath(); let start = (() => {let __ink_acc_trgt = __as_ink_string(points); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(); moveTo((() => {let __ink_acc_trgt = __as_ink_string(start); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(start); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[1] || null : (__ink_acc_trgt[1] !== undefined ? __ink_acc_trgt[1] : null)})()); each(slice(points, 1, len(points)), next => {return lineTo((() => {let __ink_acc_trgt = __as_ink_string(next); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(next); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[1] || null : (__ink_acc_trgt[1] !== undefined ? __ink_acc_trgt[1] : null)})())}); return stroke()})();
drawPaths = points => {return reduce(slice(points, 1, len(points)), (last, next) => (() => {drawLine(last, next); return next})(), (() => {let __ink_acc_trgt = __as_ink_string(points); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())};
strokeArc = (x, y, r, start, end) => (() => {beginPath(); arc(x, y, r, start, end); return stroke()})();
fillArc = (x, y, r, start, end) => (() => {beginPath(); arc(x, y, r, start, end); return fill()})();
strokeCircle = (x, y, r) => {return strokeArc(x, y, r, 0, Tau)};
fillCircle = (x, y, r) => {return fillArc(x, y, r, 0, Tau)}
PlayerHeight = 100;
G = __ink_negate(2000);
FPS = 60;
FRICTION = 5;
Width = (() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[innerWidth] || null : (__ink_acc_trgt.innerWidth !== undefined ? __ink_acc_trgt.innerWidth : null)})();
Height = (() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[innerHeight] || null : (__ink_acc_trgt.innerHeight !== undefined ? __ink_acc_trgt.innerHeight : null)})();
(() => {let __ink_assgn_trgt = __as_ink_string(Canvas); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(width, Width) : (__ink_assgn_trgt.width) = Width; return __ink_assgn_trgt})();
(() => {let __ink_assgn_trgt = __as_ink_string(Canvas); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(height, Height) : (__ink_assgn_trgt.height) = Height; return __ink_assgn_trgt})();
setLineWidth(2);
S = {ground: (Height * 0.80000000), player: {x: (Width / 2), y: 0, vx: 0, vy: 0}};
on(window, __Ink_String(`keydown`), evt => {return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), [[() => __Ink_String(` `), () => (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(vy, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vy] || null : (__ink_acc_trgt.vy !== undefined ? __ink_acc_trgt.vy : null)})() + 800)) : (__ink_assgn_trgt.vy) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vy] || null : (__ink_acc_trgt.vy !== undefined ? __ink_acc_trgt.vy : null)})() + 800); return __ink_assgn_trgt})()], [() => __Ink_String(`ArrowLeft`), () => (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(vx, ((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vx] || null : (__ink_acc_trgt.vx !== undefined ? __ink_acc_trgt.vx : null)})() - 500)) : (__ink_assgn_trgt.vx) = ((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vx] || null : (__ink_acc_trgt.vx !== undefined ? __ink_acc_trgt.vx : null)})() - 500); return __ink_assgn_trgt})()], [() => __Ink_String(`ArrowRight`), () => (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(vx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vx] || null : (__ink_acc_trgt.vx !== undefined ? __ink_acc_trgt.vx : null)})() + 500)) : (__ink_assgn_trgt.vx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vx] || null : (__ink_acc_trgt.vx !== undefined ? __ink_acc_trgt.vx : null)})() + 500); return __ink_assgn_trgt})()], [() => __Ink_Empty, () => log((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})())]])});
physics = obj => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(obj); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(x, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[x] || null : (__ink_acc_trgt.x !== undefined ? __ink_acc_trgt.x : null)})() + (() => {return ((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vx] || null : (__ink_acc_trgt.vx !== undefined ? __ink_acc_trgt.vx : null)})() / FPS)})())) : (__ink_assgn_trgt.x) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[x] || null : (__ink_acc_trgt.x !== undefined ? __ink_acc_trgt.x : null)})() + (() => {return ((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vx] || null : (__ink_acc_trgt.vx !== undefined ? __ink_acc_trgt.vx : null)})() / FPS)})()); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(obj); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(y, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[y] || null : (__ink_acc_trgt.y !== undefined ? __ink_acc_trgt.y : null)})() + (() => {return ((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vy] || null : (__ink_acc_trgt.vy !== undefined ? __ink_acc_trgt.vy : null)})() / FPS)})())) : (__ink_assgn_trgt.y) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[y] || null : (__ink_acc_trgt.y !== undefined ? __ink_acc_trgt.y : null)})() + (() => {return ((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vy] || null : (__ink_acc_trgt.vy !== undefined ? __ink_acc_trgt.vy : null)})() / FPS)})()); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(obj); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(vx, ((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vx] || null : (__ink_acc_trgt.vx !== undefined ? __ink_acc_trgt.vx : null)})() - (() => {return (((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vx] || null : (__ink_acc_trgt.vx !== undefined ? __ink_acc_trgt.vx : null)})() * FRICTION) / FPS)})())) : (__ink_assgn_trgt.vx) = ((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vx] || null : (__ink_acc_trgt.vx !== undefined ? __ink_acc_trgt.vx : null)})() - (() => {return (((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vx] || null : (__ink_acc_trgt.vx !== undefined ? __ink_acc_trgt.vx : null)})() * FRICTION) / FPS)})()); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(obj); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(vy, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vy] || null : (__ink_acc_trgt.vy !== undefined ? __ink_acc_trgt.vy : null)})() + (() => {return (G / FPS)})())) : (__ink_assgn_trgt.vy) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vy] || null : (__ink_acc_trgt.vy !== undefined ? __ink_acc_trgt.vy : null)})() + (() => {return (G / FPS)})()); return __ink_assgn_trgt})(); return __ink_match(((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[y] || null : (__ink_acc_trgt.y !== undefined ? __ink_acc_trgt.y : null)})() < 2), [[() => true, () => __ink_match((abs((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vy] || null : (__ink_acc_trgt.vy !== undefined ? __ink_acc_trgt.vy : null)})()) < 30), [[() => true, () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(obj); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(y, 0) : (__ink_assgn_trgt.y) = 0; return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(obj); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(vy, 0) : (__ink_assgn_trgt.vy) = 0; return __ink_assgn_trgt})()})()], [() => false, () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(obj); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(y, 0) : (__ink_assgn_trgt.y) = 0; return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(obj); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(vy, __ink_negate((() => {return ((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vy] || null : (__ink_acc_trgt.vy !== undefined ? __ink_acc_trgt.vy : null)})() * 0.50000000)})())) : (__ink_assgn_trgt.vy) = __ink_negate((() => {return ((() => {let __ink_acc_trgt = __as_ink_string(obj); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[vy] || null : (__ink_acc_trgt.vy !== undefined ? __ink_acc_trgt.vy : null)})() * 0.50000000)})()); return __ink_assgn_trgt})()})()]])]])})();
renderGround = () => {return drawLine([0, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ground] || null : (__ink_acc_trgt.ground !== undefined ? __ink_acc_trgt.ground : null)})()], [Width, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ground] || null : (__ink_acc_trgt.ground !== undefined ? __ink_acc_trgt.ground : null)})()])};
renderPlayer = () => (() => {return strokeCircle((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[x] || null : (__ink_acc_trgt.x !== undefined ? __ink_acc_trgt.x : null)})(), (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ground] || null : (__ink_acc_trgt.ground !== undefined ? __ink_acc_trgt.ground : null)})() - (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[y] || null : (__ink_acc_trgt.y !== undefined ? __ink_acc_trgt.y : null)})()) - (PlayerHeight / 2)), (PlayerHeight / 2))})();
main = () => (() => {physics((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[player] || null : (__ink_acc_trgt.player !== undefined ? __ink_acc_trgt.player : null)})()); renderGround(); return renderPlayer()})();
loop = () => (() => {clearRect(0, 0, Width, Height); main(); return requestAnimationFrame(loop)})();
loop();
log(__Ink_String(`hello from the Ink side`))
